buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
		classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.4'
	}
}


apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'

if (System.getenv().BUILD_NUMBER != null)
	ext.buildNumber = System.getenv().BUILD_NUMBER?.toInteger()
else
	ext.buildNumber = 0

version = "1.0.0"
group = "pcl.LanteaCraft"
archivesBaseName = "LanteaCraft"

minecraft {
	version = "1.8.9-11.15.1.1722"
	replace "@VERSION@", project.version
	replace "@BUILD@", project.ext.buildNumber
	
	runDir = "run"
	mappings = "snapshot_20160214"
}

sourceSets.main.java.srcDir("./src/externs/java")

jar.doFirst {
	for (String s : new File("./src/externs/java").list()) {
		File junkfile = new File(sourceSets.main.output.classesDir, s);
		logger.lifecycle(String.format("Deleting compiled extern file %s.", junkfile.getAbsolutePath()));
		delete junkfile;
	}
}

jar.version = "${minecraft.version}"
jar.classifier = "${ext.buildNumber}"
jar.manifest = manifest { attributes(
	"FMLCorePlugin": "lc.coremod.LCCoreMod",
	"FMLCorePluginContainsFMLMod": "icanhazfmlmodpweeze"
) }

def curseforge_key = 0
def curse_changlog = "default"
if (project.hasProperty('curseforge_key')) {
	curseforge_key = project.curseforge_key
	curse_changlog = project.changelog
}


curseforge {
	apiKey = curseforge_key
	project {
		id = "77342"
		releaseType = "release"
		changelog = curse_changlog
		releaseType = "beta"
	}
}

processResources {
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version':project.version + '-' + project.ext.buildNumber, 'mcversion':project.minecraft.version
	}
	
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

task showMeCache << {
  configurations.compile.each { println it }
}
